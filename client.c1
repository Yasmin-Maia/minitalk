/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   client.c                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: ymaia-do <ymaia-do@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/05/06 15:30:30 by yasmin            #+#    #+#             */
/*   Updated: 2025/06/23 18:17:03 by ymaia-do         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "minitalk.h"

void send_size(pid_t pid, int size)
{
    int bit;
    
    bit = 31;
    while (bit >= 0) {
        if (size & (1 << bit))
            kill(pid, SIGUSR1);
        else
            kill(pid, SIGUSR2);
        usleep(1000);
        bit--;
    }
}

void send_str(pid_t pid, char *str, int size)
{
    int bit_index;
	int bit;

    bit_index = 0;
    while(bit_index < size)
    {
		bit = 7;
		while (bit >= 0)
		{
			if ((str[bit_index] >> bit) & 1)
				kill(pid, SIGUSR1);
			else
				kill(pid, SIGUSR2);
			bit--;
			usleep(1000);
		}
        bit_index++;
    }
}

void ack_handler(int sig)
{
    if (sig == SIGUSR1)
    {
        write(1, "received mensage!\n", 20);
        exit(0);
    }
}

void    error_exit(char *msg)
{
    ft_putendl_fd(msg, 2);
    exit(1);
}

int main(int argc, char **argv)
{
	pid_t   pid;
	char    *msg;
	int     len;
	
	if (argc != 3)
	error_exit("Use: ./client <PID> <mensagem>\n");
	msg = argv[2];
	len = ft_strlen(msg);
	pid = ft_atoi(argv[1]);
	ft_printf("%d\n", len);
	send_size(pid, len);
	send_str(pid, msg, len);
	return (0);
}
